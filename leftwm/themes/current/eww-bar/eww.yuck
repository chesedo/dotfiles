(include "components/clock.yuck")
(include "components/cpu.yuck")
(include "components/sound.yuck")

(defwidget bar-left []
  (centerbox :orientation "h"
    (workspaces :tags wm-tags-0)
    (label :text active-window)
    (music)
  )
)
(defwidget bar-right []
  (centerbox :orientation "h"
    (workspaces :tags wm-tags-1)
    (box)
    ; (label :text active-window)
    (sidestuff)
  )
)

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric2 :label "ï‚«"
            :value "${round(EWW_NET.enp4s0.NET_DOWN / 1024, 0)} KB"
    )
    (metric2 :label "ï‚ª"
            :value "${round(EWW_NET.enp4s0.NET_UP / 1024, 0)} KB"
    )
    (button :onclick "alacritty --command htop &"
      (circular-progress :value "${EWW_RAM.used_mem_perc}"
                         :thickness 3
                         :start-at 75
                         :class {"${EWW_RAM.used_mem_perc}" > 70 ? "donut high" : "donut"}
                         :tooltip "${round(EWW_RAM.used_mem / 1024 / 1024 / 1024, 3)} Gb"
        "${round(EWW_RAM.used_mem / 1024 / 1024 / 1024, 0)}"
      )
    )
    (cpu)
    (sound)
    (clock)
  )
)

(defwidget workspaces [tags]
  (literal :content {tags})
)

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "end"
    {music != "" ? "ðŸŽµ ${music}" : ""}
  )
)

(defwidget metric2 [label value ?onclick]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (button :onclick "alacritty --command '${onclick}' &"
      (box
          :space-evenly false
        (box :class "label" label)
        (box :class "value" value)
      )
    )
  )
)



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(deflisten wm-tags-0
  "leftwm-state -w 0 -t ~/.config/leftwm/themes/current/template.liquid")
(deflisten wm-tags-1
  "leftwm-state -w 1 -t ~/.config/leftwm/themes/current/template.liquid")
(deflisten active-window
  "leftwm-state -s '{{window_title}}'")

(defwindow bar0
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0"
                      :y "0"
                      :width "100%"
                      :height "28px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "32px")
  (bar-left))
(defwindow bar1
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0"
                      :y "0"
                      :width "1728px"
                      :height "28px"
                      :anchor "top left")
  :reserve (struts :side "top" :distance "32px")
  (bar-right))

(defpoll clipboard-entries
  :interval "1s"
  `echo '(box :orientation "vertical"'; clipcatctl list | jq -Rsn '[inputs | split("\\n")[] | split(": ") | .[0] as $id | .[1:] | join(": ") | @html as $text | {"id": $id, "text": $text}]' | jq -r '.[:15][] | "(clipboard-entry :id \\"\\(.id)\\" :text \\"\\(.text)\\")"'; echo ")"`
)

(defwidget clipboard []
  (literal :content clipboard-entries)
)

(defwidget clipboard-entry [id text]
  (button
    :class "clipboard-entry"
    :onclick "clipcatctl promote ${id}; eww close clipboard"
    :halign "fill"
    (label
      :text text
      :show-truncated true
    )
  )
)

(defwindow clipboard
  :monitor 1
  :stacking "fg"
  :windowtype "dialog"
  :focusable true
  (clipboard)
)
